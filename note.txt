##Part1

-标识符
    -第一个字符必须是字母表中的字母或下划线'_'。
    -标识符的其他的部分有字母、数字和下划线组成。
    -标识符对大小写敏感。

-python保留字
    在命令行中可以输出当前python的保留字
    //进入python
    python
    //导入keyword包
    import keyword
    //输入保留字
    keyword.kwlist
    //结果
    ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

-注释 python使用 '#' 来作为注释标识

-行与缩进
    python最具特色的就是使用缩进来表示代码块，不需要大括号
    缩进的空格是可以变的，但是同一个代码块的语句的缩进空格必须是一致的

    如果一行语句要换行，可以在末尾使用 ' + \' 来作为强制换行的连接符
        total = item_one + \
                   item_two + \
                   item_three

    在[]、{}、() 中的多行语句不需要反斜杠
        total = ['item_one', 'item_two',
                    'item_three', 'item_four']

-空行
    函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。
    空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。
    记住：空行也是程序代码的一部分。

-输入
    可以使用 `input()` 输入内容

-同一行显示多条语句 可以用 `;` 来对行之间分割

-多个语句构成代码组
    缩进相同的一组语句构成一个代码块，我们称之代码组
    像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。
    我们将首行及后面的代码组称为一个子句(clause)。
    如下实例：
    if one :
        suite
    elif two:
        siuite
    else three:
        siuite

-输出语句
    `print("a b c")`
    不换行输出
    `print("a", end=" ")`
    `print("b", end=" ")`
    `print("c", end=" ")`



##Part2

###数据类型
    python3中有六个标准的数据类型
    Number 数字
    String 字符串
    List 列表
    Tuple 元组
    Sets 集合
    Dictionary 字典

-List(`[]`) 列表是Python中使用最频繁的数据结构
列表中元素的类型可以不同，支持数字、字符串、列表（嵌套）
列表写在 '[]' 之间，用逗号分隔元素
`list = ['abc', 789, 2.34, 'round']`
`tinyList = [123, 'run']`
列表元素获取跟字符串一样，使用下标来直接获取；左往右顺序是下标为0开始，右往左顺序下标是-1开始(注：无论是左往右还是右往左,切片的时候左边下标要大于右边)
`print(list[0])` 输出：abc
`print(list[-3,-1])` 输出：789
加好 `+` 是列表的连接运算符，星号 `*` 是重复操作
`print(list + tinyList)` 输出：['abc', 789, 2.34, 'round', 123, 'run']
`print(list * 2)` 输出：['abc', 789, 2.34, 'round', 'abc', 789, 2.34, 'round']
与字符串不同，可以为列表中的元素赋值

-Tuple(`()`) 元组与列表相似，不过元组的元素是不能改变的
元组下载小括号 `()` 里面，用逗号隔开
其他基本操作与list一致

-Set (`{}`) 集合是一个无序不重复的序列
基本功能就是进行成员关系测试和去重
可以使用 `{...}` 或者 `set(...)`函数 创建集合;注意：创建一个空的set一定要用 `set()` ,因为 `{}` 是创建空的字典
`student = {'tom', 'jim', 'mary', 'jack', 'tom'}`
`print(student)` 输出：`{'mary', 'jack', 'jim', 'tom'}`
判断是否含有该元素
`print('tom' in student)` 输出：`True`
集合可以进行运算
`a = set('abcdefocean')`
`b = {bdfopq}`
`print(a-b)` a与b的差集
输出：`{'n', 'c', 'f', 'd', 'a', 'e', 'b', 'o'}`
`print(a|b)` a与b的并集
print(a&b)  #交集
print(a^b)  #a和b中不同时存在的元素


-字典 (`{}`) 无序的对象集合，相当于java中的map
列表是有序的对象集合，字段那是无序的对象集合。两者之间的区别在于：字典中的元素是通过键来存取，而不是通过偏移量。
字典是一种映射类型，字典用 `{}` 标识，它是一个无序的键(key):值(value)对集合。
键(key)必须是不可变类型。在同一个字典中，键(key)是唯一的
`dict = {} #空的字典`
`dict['one'] = "1-第一题"`
`dict[2] = "第二题"`
`print(dict)` 输出：`{'one': '1-第一题', 2: '第二题'}`
`tinyDict = {'name':'rouoob', "tian":456}`
`print(tinyDict)` 输出：`{'name': 'rouoob', 'tian': 456}`
字典类型也有一些内置函数，例如clear()、keys()、values()等























